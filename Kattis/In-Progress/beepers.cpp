#include <cstring>
#include <algorithm>
#include <array>
#include <bitset>
#include <deque>
#include <forward_list>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <math.h>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#ifdef _MSC_VER
inline int __builtin_clz(unsigned int value)
{
	return __lzcnt(value);
}
inline int __builtin_clzl(unsigned long int value)
{
	return __lzcnt(value);
}
inline int __builtin_clzll(unsigned long long int value)
{
	return value & 0xffffffff00000000ull ? __lzcnt(value >> 32) : 32 + __lzcnt(value);
}
inline constexpr int __builtin_ctzll(unsigned long long int value);
inline constexpr int __builtin_ctz(unsigned int value)
{
	return __builtin_ctzll(value);
}
inline constexpr int __builtin_ctzl(unsigned long int value)
{
	return __builtin_ctzll(value);
}
inline constexpr int __builtin_ctzll(unsigned long long int value)
{
	if (value == 0)
	{
		return 437; // undefined
	}
	int ctr = 0;
#define CTZ_SEGMENT(n) do { if (!(value & ((1ull << (n)) - 1))) { ctr |= (n); value >>= (n); } } while (0)
	CTZ_SEGMENT(1 << 5);
	CTZ_SEGMENT(1 << 4);
	CTZ_SEGMENT(1 << 3);
	CTZ_SEGMENT(1 << 2);
	CTZ_SEGMENT(1 << 1);
	CTZ_SEGMENT(1 << 0);
#undef CTZ_SEGMENT
	return ctr;
}
#endif

#define loop(m, n, i) for (uli i = (m); i < (n); i++)
#define rloop(m, n, i) for (uli i = (n); i-- > (m);)

#define tCases() uli testCaseCount; cin >> testCaseCount; for (uli testCaseIndex = 0; testCaseIndex < testCaseCount; testCaseIndex++)

#define endl '\n'

using namespace std;

typedef bool                       bi;
typedef char                       ci;
typedef unsigned char              uci;
typedef short                      si;
typedef unsigned short             usi;
typedef int                        li;
typedef unsigned                   uli;
typedef long long                  lli;
typedef unsigned long long         ulli;
typedef float                      sf;
typedef double                     df;
typedef long double                ldf;

typedef pair<bi, bi>               pbi;
typedef pair<ci, ci>               pci;
typedef pair<uci, uci>             puci;
typedef pair<si, si>               psi;
typedef pair<usi, usi>             pusi;
typedef pair<li, li>               pli;
typedef pair<uli, uli>             puli;
typedef pair<lli, lli>             plli;
typedef pair<ulli, ulli>           pulli;
typedef pair<sf, sf>               psf;
typedef pair<df, df>               pdf;
typedef pair<ldf, ldf>             pldf;

typedef vector<bi>                 vbi;
typedef vector<ci>                 vci;
typedef vector<uci>                vuci;
typedef vector<si>                 vsi;
typedef vector<usi>                vusi;
typedef vector<li>                 vli;
typedef vector<uli>                vuli;
typedef vector<lli>                vlli;
typedef vector<ulli>               vulli;
typedef vector<sf>                 vsf;
typedef vector<df>                 vdf;
typedef vector<ldf>                vldf;

typedef vector<pbi>                vpbi;
typedef vector<pci>                vpci;
typedef vector<puci>               vpuci;
typedef vector<psi>                vpsi;
typedef vector<pusi>               vpusi;
typedef vector<pli>                vpli;
typedef vector<puli>               vpuli;
typedef vector<plli>               vplli;
typedef vector<pulli>              vpulli;
typedef vector<psf>                vpsf;
typedef vector<pdf>                vpdf;
typedef vector<pldf>               vpldf;

typedef vector<vbi>                vvbi;
typedef vector<vci>                vvci;
typedef vector<vuci>               vvuci;
typedef vector<vsi>                vvsi;
typedef vector<vusi>               vvusi;
typedef vector<vli>                vvli;
typedef vector<vuli>               vvuli;
typedef vector<vlli>               vvlli;
typedef vector<vulli>              vvulli;
typedef vector<vsf>                vvsf;
typedef vector<vdf>                vvdf;
typedef vector<vldf>               vvldf;

typedef vector<vpbi>               vvpbi;
typedef vector<vpci>               vvpci;
typedef vector<vpuci>              vvpuci;
typedef vector<vpsi>               vvpsi;
typedef vector<vpusi>              vvpusi;
typedef vector<vpli>               vvpli;
typedef vector<vpuli>              vvpuli;
typedef vector<vplli>              vvplli;
typedef vector<vpulli>             vvpulli;
typedef vector<vpsf>               vvpsf;
typedef vector<vpdf>               vvpdf;
typedef vector<vpldf>              vvpldf;

typedef forward_list<bi>           l1bi;
typedef forward_list<ci>           l1ci;
typedef forward_list<uci>          l1uci;
typedef forward_list<si>           l1si;
typedef forward_list<usi>          l1usi;
typedef forward_list<li>           l1li;
typedef forward_list<uli>          l1uli;
typedef forward_list<lli>          l1lli;
typedef forward_list<ulli>         l1ulli;
typedef forward_list<sf>           l1sf;
typedef forward_list<df>           l1df;
typedef forward_list<ldf>          l1ldf;

typedef forward_list<pbi>          l1pbi;
typedef forward_list<pci>          l1pci;
typedef forward_list<puci>         l1puci;
typedef forward_list<psi>          l1psi;
typedef forward_list<pusi>         l1pusi;
typedef forward_list<pli>          l1pli;
typedef forward_list<puli>         l1puli;
typedef forward_list<plli>         l1plli;
typedef forward_list<pulli>        l1pulli;
typedef forward_list<psf>          l1psf;
typedef forward_list<pdf>          l1pdf;
typedef forward_list<pldf>         l1pldf;

typedef list<bi>                   l2bi;
typedef list<ci>                   l2ci;
typedef list<uci>                  l2uci;
typedef list<si>                   l2si;
typedef list<usi>                  l2usi;
typedef list<li>                   l2li;
typedef list<uli>                  l2uli;
typedef list<lli>                  l2lli;
typedef list<ulli>                 l2ulli;
typedef list<sf>                   l2sf;
typedef list<df>                   l2df;
typedef list<ldf>                  l2ldf;

typedef list<pbi>                  l2pbi;
typedef list<pci>                  l2pci;
typedef list<puci>                 l2puci;
typedef list<psi>                  l2psi;
typedef list<pusi>                 l2pusi;
typedef list<pli>                  l2pli;
typedef list<puli>                 l2puli;
typedef list<plli>                 l2plli;
typedef list<pulli>                l2pulli;
typedef list<psf>                  l2psf;
typedef list<pdf>                  l2pdf;
typedef list<pldf>                 l2pldf;

typedef set<bi>                    sbi;
typedef set<ci>                    sci;
typedef set<uci>                   suci;
typedef set<si>                    ssi;
typedef set<usi>                   susi;
typedef set<li>                    sli;
typedef set<uli>                   suli;
typedef set<lli>                   slli;
typedef set<ulli>                  sulli;
typedef set<sf>                    ssf;
typedef set<df>                    sdf;
typedef set<ldf>                   sldf;

typedef set<pbi>                   spbi;
typedef set<pci>                   spci;
typedef set<puci>                  spuci;
typedef set<psi>                   spsi;
typedef set<pusi>                  spusi;
typedef set<pli>                   spli;
typedef set<puli>                  spuli;
typedef set<plli>                  splli;
typedef set<pulli>                 spulli;
typedef set<psf>                   spsf;
typedef set<pdf>                   spdf;
typedef set<pldf>                  spldf;

typedef multiset<bi>               msbi;
typedef multiset<ci>               msci;
typedef multiset<uci>              msuci;
typedef multiset<si>               mssi;
typedef multiset<usi>              msusi;
typedef multiset<li>               msli;
typedef multiset<uli>              msuli;
typedef multiset<lli>              mslli;
typedef multiset<ulli>             msulli;
typedef multiset<sf>               mssf;
typedef multiset<df>               msdf;
typedef multiset<ldf>              msldf;

typedef multiset<pbi>              mspbi;
typedef multiset<pci>              mspci;
typedef multiset<puci>             mspuci;
typedef multiset<psi>              mspsi;
typedef multiset<pusi>             mspusi;
typedef multiset<pli>              mspli;
typedef multiset<puli>             mspuli;
typedef multiset<plli>             msplli;
typedef multiset<pulli>            mspulli;
typedef multiset<psf>              mspsf;
typedef multiset<pdf>              mspdf;
typedef multiset<pldf>             mspldf;

typedef unordered_multiset<bi>     umsbi;
typedef unordered_multiset<ci>     umsci;
typedef unordered_multiset<uci>    umsuci;
typedef unordered_multiset<si>     umssi;
typedef unordered_multiset<usi>    umsusi;
typedef unordered_multiset<li>     umsli;
typedef unordered_multiset<uli>    umsuli;
typedef unordered_multiset<lli>    umslli;
typedef unordered_multiset<ulli>   umsulli;
typedef unordered_multiset<sf>     umssf;
typedef unordered_multiset<df>     umsdf;
typedef unordered_multiset<ldf>    umsldf;

typedef unordered_multiset<pbi>    umspbi;
typedef unordered_multiset<pci>    umspci;
typedef unordered_multiset<puci>   umspuci;
typedef unordered_multiset<psi>    umspsi;
typedef unordered_multiset<pusi>   umspusi;
typedef unordered_multiset<pli>    umspli;
typedef unordered_multiset<puli>   umspuli;
typedef unordered_multiset<plli>   umsplli;
typedef unordered_multiset<pulli>  umspulli;
typedef unordered_multiset<psf>    umspsf;
typedef unordered_multiset<pdf>    umspdf;
typedef unordered_multiset<pldf>   umspldf;

typedef unordered_set<bi>          usbi;
typedef unordered_set<ci>          usci;
typedef unordered_set<uci>         usuci;
typedef unordered_set<si>          ussi;
typedef unordered_set<usi>         ususi;
typedef unordered_set<li>          usli;
typedef unordered_set<uli>         usuli;
typedef unordered_set<lli>         uslli;
typedef unordered_set<ulli>        usulli;
typedef unordered_set<sf>          ussf;
typedef unordered_set<df>          usdf;
typedef unordered_set<ldf>         usldf;

typedef unordered_set<pbi>         uspbi;
typedef unordered_set<pci>         uspci;
typedef unordered_set<puci>        uspuci;
typedef unordered_set<psi>         uspsi;
typedef unordered_set<pusi>        uspusi;
typedef unordered_set<pli>         uspli;
typedef unordered_set<puli>        uspuli;
typedef unordered_set<plli>        usplli;
typedef unordered_set<pulli>       uspulli;
typedef unordered_set<psf>         uspsf;
typedef unordered_set<pdf>         uspdf;
typedef unordered_set<pldf>        uspldf;

typedef stack<bi>                  stbi;
typedef stack<ci>                  stci;
typedef stack<uci>                 stuci;
typedef stack<si>                  stsi;
typedef stack<usi>                 stusi;
typedef stack<li>                  stli;
typedef stack<uli>                 stuli;
typedef stack<lli>                 stlli;
typedef stack<ulli>                stulli;
typedef stack<sf>                  stsf;
typedef stack<df>                  stdf;
typedef stack<ldf>                 stldf;

typedef stack<pbi>                 stpbi;
typedef stack<pci>                 stpci;
typedef stack<puci>                stpuci;
typedef stack<psi>                 stpsi;
typedef stack<pusi>                stpusi;
typedef stack<pli>                 stpli;
typedef stack<puli>                stpuli;
typedef stack<plli>                stplli;
typedef stack<pulli>               stpulli;
typedef stack<psf>                 stpsf;
typedef stack<pdf>                 stpdf;
typedef stack<pldf>                stpldf;

typedef queue<bi>                  qbi;
typedef queue<ci>                  qci;
typedef queue<uci>                 quci;
typedef queue<si>                  qsi;
typedef queue<usi>                 qusi;
typedef queue<li>                  qli;
typedef queue<uli>                 quli;
typedef queue<lli>                 qlli;
typedef queue<ulli>                qulli;
typedef queue<sf>                  qsf;
typedef queue<df>                  qdf;
typedef queue<ldf>                 qldf;

typedef queue<pbi>                 qpbi;
typedef queue<pci>                 qpci;
typedef queue<puci>                qpuci;
typedef queue<psi>                 qpsi;
typedef queue<pusi>                qpusi;
typedef queue<pli>                 qpli;
typedef queue<puli>                qpuli;
typedef queue<plli>                qplli;
typedef queue<pulli>               qpulli;
typedef queue<psf>                 qpsf;
typedef queue<pdf>                 qpdf;
typedef queue<pldf>                qpldf;

typedef deque<bi>                  dbi;
typedef deque<ci>                  dci;
typedef deque<uci>                 duci;
typedef deque<si>                  dsi;
typedef deque<usi>                 dusi;
typedef deque<li>                  dli;
typedef deque<uli>                 duli;
typedef deque<lli>                 dlli;
typedef deque<ulli>                dulli;
typedef deque<sf>                  dsf;
typedef deque<df>                  ddf;
typedef deque<ldf>                 dldf;

typedef deque<pbi>                 dpbi;
typedef deque<pci>                 dpci;
typedef deque<puci>                dpuci;
typedef deque<psi>                 dpsi;
typedef deque<pusi>                dpusi;
typedef deque<pli>                 dpli;
typedef deque<puli>                dpuli;
typedef deque<plli>                dplli;
typedef deque<pulli>               dpulli;
typedef deque<psf>                 dpsf;
typedef deque<pdf>                 dpdf;
typedef deque<pldf>                dpldf;

typedef priority_queue<bi>         pqbi;
typedef priority_queue<ci>         pqci;
typedef priority_queue<uci>        pquci;
typedef priority_queue<si>         pqsi;
typedef priority_queue<usi>        pqusi;
typedef priority_queue<li>         pqli;
typedef priority_queue<uli>        pquli;
typedef priority_queue<lli>        pqlli;
typedef priority_queue<ulli>       pqulli;
typedef priority_queue<sf>         pqsf;
typedef priority_queue<df>         pqdf;
typedef priority_queue<ldf>        pqldf;

typedef priority_queue<pbi>        pqpbi;
typedef priority_queue<pci>        pqpci;
typedef priority_queue<puci>       pqpuci;
typedef priority_queue<psi>        pqpsi;
typedef priority_queue<pusi>       pqpusi;
typedef priority_queue<pli>        pqpli;
typedef priority_queue<puli>       pqpuli;
typedef priority_queue<plli>       pqplli;
typedef priority_queue<pulli>      pqpulli;
typedef priority_queue<psf>        pqpsf;
typedef priority_queue<pdf>        pqpdf;
typedef priority_queue<pldf>       pqpldf;

template<class T, class Container = vector<T>>
using max_heap = priority_queue<T, Container, less<T>>;

template<class T, class Container = vector<T>>
using min_heap = priority_queue<T, Container, greater<T>>;

#define MIN(T) (numeric_limits<T>::min())
#define MAX(T) (numeric_limits<T>::max())
#define INF(T) (numeric_limits<T>::infinity())

inline constexpr uli gcd(uli l, uli r)
{
	if (!(l && r))
	{
		return l | r;
	}
	int s = __builtin_ctz(l | r);
	l >>= __builtin_ctz(l);
	do
	{
		r >>= __builtin_ctz(r);
		if (l > r)
		{
			swap(l, r);
		}
		r -= l;
	}
	while (r);
	return l << s;
}

inline constexpr ulli gcd(ulli l, ulli r)
{
	if (!(l && r))
	{
		return l | r;
	}
	int s = __builtin_ctzll(l | r);
	l >>= __builtin_ctzll(l);
	do
	{
		r >>= __builtin_ctzll(r);
		if (l > r)
		{
			swap(l, r);
		}
		r -= l;
	}
	while (r);
	return l << s;
}

inline uli dist1(const vuli& X, uli i, uli j)
{
	uli xi = X[i], xj = X[j];
	return xi > xj ? xi - xj : xj - xi;
}

inline uli dist(const vuli& X, const vuli& Y, uli i, uli j)
{
	return dist1(X, i, j) + dist1(Y, i, j);
}

const uli PRE_VALS3_2[]{ 0x3 };
const uli PRE_VALS4_2[]{ 0x3, 0x5, 0x6 };
const uli PRE_VALS4_3[]{ 0x7 };
const uli PRE_VALS5_2[]{ 0x3, 0x5, 0x6, 0x9, 0xa, 0xc };
const uli PRE_VALS5_3[]{ 0x7, 0xb, 0xd, 0xe };
const uli PRE_VALS5_4[]{ 0xf };
const uli PRE_VALS6_2[]{ 0x3, 0x5, 0x6, 0x9, 0xa, 0xc, 0x11, 0x12, 0x14, 0x18 };
const uli PRE_VALS6_3[]{ 0x7, 0xb, 0xd, 0xe, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c };
const uli PRE_VALS6_4[]{ 0xf, 0x17, 0x1b, 0x1d, 0x1e };
const uli PRE_VALS6_5[]{ 0x1f };
const uli PRE_VALS7_2[]{ 0x3, 0x5, 0x6, 0x9, 0xa, 0xc, 0x11, 0x12, 0x14, 0x18, 0x21, 0x22, 0x24, 0x28, 0x30 };
const uli PRE_VALS7_3[]{ 0x7, 0xb, 0xd, 0xe, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c, 0x23, 0x25, 0x26, 0x29, 0x2a, 0x2c, 0x31, 0x32, 0x34, 0x38 };
const uli PRE_VALS7_4[]{ 0xf, 0x17, 0x1b, 0x1d, 0x1e, 0x27, 0x2b, 0x2d, 0x2e, 0x33, 0x35, 0x36, 0x39, 0x3a, 0x3c };
const uli PRE_VALS7_5[]{ 0x1f, 0x2f, 0x37, 0x3b, 0x3d, 0x3e };
const uli PRE_VALS7_6[]{ 0x3f };
const uli PRE_VALS8_2[]{ 0x3, 0x5, 0x6, 0x9, 0xa, 0xc, 0x11, 0x12, 0x14, 0x18, 0x21, 0x22, 0x24, 0x28, 0x30, 0x41, 0x42, 0x44, 0x48, 0x50, 0x60 };
const uli PRE_VALS8_3[]{ 0x7, 0xb, 0xd, 0xe, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c, 0x23, 0x25, 0x26, 0x29, 0x2a, 0x2c, 0x31, 0x32, 0x34, 0x38, 0x43, 0x45, 0x46, 0x49, 0x4a, 0x4c, 0x51, 0x52, 0x54, 0x58, 0x61, 0x62, 0x64, 0x68, 0x70 };
const uli PRE_VALS8_4[]{ 0xf, 0x17, 0x1b, 0x1d, 0x1e, 0x27, 0x2b, 0x2d, 0x2e, 0x33, 0x35, 0x36, 0x39, 0x3a, 0x3c, 0x47, 0x4b, 0x4d, 0x4e, 0x53, 0x55, 0x56, 0x59, 0x5a, 0x5c, 0x63, 0x65, 0x66, 0x69, 0x6a, 0x6c, 0x71, 0x72, 0x74, 0x78 };
const uli PRE_VALS8_5[]{ 0x1f, 0x2f, 0x37, 0x3b, 0x3d, 0x3e, 0x4f, 0x57, 0x5b, 0x5d, 0x5e, 0x67, 0x6b, 0x6d, 0x6e, 0x73, 0x75, 0x76, 0x79, 0x7a, 0x7c };
const uli PRE_VALS8_6[]{ 0x3f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7e };
const uli PRE_VALS8_7[]{ 0x7f };
const uli PRE_VALS9_2[]{ 0x3, 0x5, 0x6, 0x9, 0xa, 0xc, 0x11, 0x12, 0x14, 0x18, 0x21, 0x22, 0x24, 0x28, 0x30, 0x41, 0x42, 0x44, 0x48, 0x50, 0x60, 0x81, 0x82, 0x84, 0x88, 0x90, 0xa0, 0xc0 };
const uli PRE_VALS9_3[]{ 0x7, 0xb, 0xd, 0xe, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c, 0x23, 0x25, 0x26, 0x29, 0x2a, 0x2c, 0x31, 0x32, 0x34, 0x38, 0x43, 0x45, 0x46, 0x49, 0x4a, 0x4c, 0x51, 0x52, 0x54, 0x58, 0x61, 0x62, 0x64, 0x68, 0x70, 0x83, 0x85, 0x86, 0x89, 0x8a, 0x8c, 0x91, 0x92, 0x94, 0x98, 0xa1, 0xa2, 0xa4, 0xa8, 0xb0, 0xc1, 0xc2, 0xc4, 0xc8, 0xd0, 0xe0 };
const uli PRE_VALS9_4[]{ 0xf, 0x17, 0x1b, 0x1d, 0x1e, 0x27, 0x2b, 0x2d, 0x2e, 0x33, 0x35, 0x36, 0x39, 0x3a, 0x3c, 0x47, 0x4b, 0x4d, 0x4e, 0x53, 0x55, 0x56, 0x59, 0x5a, 0x5c, 0x63, 0x65, 0x66, 0x69, 0x6a, 0x6c, 0x71, 0x72, 0x74, 0x78, 0x87, 0x8b, 0x8d, 0x8e, 0x93, 0x95, 0x96, 0x99, 0x9a, 0x9c, 0xa3, 0xa5, 0xa6, 0xa9, 0xaa, 0xac, 0xb1, 0xb2, 0xb4, 0xb8, 0xc3, 0xc5, 0xc6, 0xc9, 0xca, 0xcc, 0xd1, 0xd2, 0xd4, 0xd8, 0xe1, 0xe2, 0xe4, 0xe8, 0xf0 };
const uli PRE_VALS9_5[]{ 0x1f, 0x2f, 0x37, 0x3b, 0x3d, 0x3e, 0x4f, 0x57, 0x5b, 0x5d, 0x5e, 0x67, 0x6b, 0x6d, 0x6e, 0x73, 0x75, 0x76, 0x79, 0x7a, 0x7c, 0x8f, 0x97, 0x9b, 0x9d, 0x9e, 0xa7, 0xab, 0xad, 0xae, 0xb3, 0xb5, 0xb6, 0xb9, 0xba, 0xbc, 0xc7, 0xcb, 0xcd, 0xce, 0xd3, 0xd5, 0xd6, 0xd9, 0xda, 0xdc, 0xe3, 0xe5, 0xe6, 0xe9, 0xea, 0xec, 0xf1, 0xf2, 0xf4, 0xf8 };
const uli PRE_VALS9_6[]{ 0x3f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7e, 0x9f, 0xaf, 0xb7, 0xbb, 0xbd, 0xbe, 0xcf, 0xd7, 0xdb, 0xdd, 0xde, 0xe7, 0xeb, 0xed, 0xee, 0xf3, 0xf5, 0xf6, 0xf9, 0xfa, 0xfc };
const uli PRE_VALS9_7[]{ 0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe };
const uli PRE_VALS9_8[]{ 0xff };
const uli PRE_VALSa_2[]{ 0x3, 0x5, 0x6, 0x9, 0xa, 0xc, 0x11, 0x12, 0x14, 0x18, 0x21, 0x22, 0x24, 0x28, 0x30, 0x41, 0x42, 0x44, 0x48, 0x50, 0x60, 0x81, 0x82, 0x84, 0x88, 0x90, 0xa0, 0xc0, 0x101, 0x102, 0x104, 0x108, 0x110, 0x120, 0x140, 0x180 };
const uli PRE_VALSa_3[]{ 0x7, 0xb, 0xd, 0xe, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c, 0x23, 0x25, 0x26, 0x29, 0x2a, 0x2c, 0x31, 0x32, 0x34, 0x38, 0x43, 0x45, 0x46, 0x49, 0x4a, 0x4c, 0x51, 0x52, 0x54, 0x58, 0x61, 0x62, 0x64, 0x68, 0x70, 0x83, 0x85, 0x86, 0x89, 0x8a, 0x8c, 0x91, 0x92, 0x94, 0x98, 0xa1, 0xa2, 0xa4, 0xa8, 0xb0, 0xc1, 0xc2, 0xc4, 0xc8, 0xd0, 0xe0, 0x103, 0x105, 0x106, 0x109, 0x10a, 0x10c, 0x111, 0x112, 0x114, 0x118, 0x121, 0x122, 0x124, 0x128, 0x130, 0x141, 0x142, 0x144, 0x148, 0x150, 0x160, 0x181, 0x182, 0x184, 0x188, 0x190, 0x1a0, 0x1c0 };
const uli PRE_VALSa_4[]{ 0xf, 0x17, 0x1b, 0x1d, 0x1e, 0x27, 0x2b, 0x2d, 0x2e, 0x33, 0x35, 0x36, 0x39, 0x3a, 0x3c, 0x47, 0x4b, 0x4d, 0x4e, 0x53, 0x55, 0x56, 0x59, 0x5a, 0x5c, 0x63, 0x65, 0x66, 0x69, 0x6a, 0x6c, 0x71, 0x72, 0x74, 0x78, 0x87, 0x8b, 0x8d, 0x8e, 0x93, 0x95, 0x96, 0x99, 0x9a, 0x9c, 0xa3, 0xa5, 0xa6, 0xa9, 0xaa, 0xac, 0xb1, 0xb2, 0xb4, 0xb8, 0xc3, 0xc5, 0xc6, 0xc9, 0xca, 0xcc, 0xd1, 0xd2, 0xd4, 0xd8, 0xe1, 0xe2, 0xe4, 0xe8, 0xf0, 0x107, 0x10b, 0x10d, 0x10e, 0x113, 0x115, 0x116, 0x119, 0x11a, 0x11c, 0x123, 0x125, 0x126, 0x129, 0x12a, 0x12c, 0x131, 0x132, 0x134, 0x138, 0x143, 0x145, 0x146, 0x149, 0x14a, 0x14c, 0x151, 0x152, 0x154, 0x158, 0x161, 0x162, 0x164, 0x168, 0x170, 0x183, 0x185, 0x186, 0x189, 0x18a, 0x18c, 0x191, 0x192, 0x194, 0x198, 0x1a1, 0x1a2, 0x1a4, 0x1a8, 0x1b0, 0x1c1, 0x1c2, 0x1c4, 0x1c8, 0x1d0, 0x1e0 };
const uli PRE_VALSa_5[]{ 0x1f, 0x2f, 0x37, 0x3b, 0x3d, 0x3e, 0x4f, 0x57, 0x5b, 0x5d, 0x5e, 0x67, 0x6b, 0x6d, 0x6e, 0x73, 0x75, 0x76, 0x79, 0x7a, 0x7c, 0x8f, 0x97, 0x9b, 0x9d, 0x9e, 0xa7, 0xab, 0xad, 0xae, 0xb3, 0xb5, 0xb6, 0xb9, 0xba, 0xbc, 0xc7, 0xcb, 0xcd, 0xce, 0xd3, 0xd5, 0xd6, 0xd9, 0xda, 0xdc, 0xe3, 0xe5, 0xe6, 0xe9, 0xea, 0xec, 0xf1, 0xf2, 0xf4, 0xf8, 0x10f, 0x117, 0x11b, 0x11d, 0x11e, 0x127, 0x12b, 0x12d, 0x12e, 0x133, 0x135, 0x136, 0x139, 0x13a, 0x13c, 0x147, 0x14b, 0x14d, 0x14e, 0x153, 0x155, 0x156, 0x159, 0x15a, 0x15c, 0x163, 0x165, 0x166, 0x169, 0x16a, 0x16c, 0x171, 0x172, 0x174, 0x178, 0x187, 0x18b, 0x18d, 0x18e, 0x193, 0x195, 0x196, 0x199, 0x19a, 0x19c, 0x1a3, 0x1a5, 0x1a6, 0x1a9, 0x1aa, 0x1ac, 0x1b1, 0x1b2, 0x1b4, 0x1b8, 0x1c3, 0x1c5, 0x1c6, 0x1c9, 0x1ca, 0x1cc, 0x1d1, 0x1d2, 0x1d4, 0x1d8, 0x1e1, 0x1e2, 0x1e4, 0x1e8, 0x1f0 };
const uli PRE_VALSa_6[]{ 0x3f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7e, 0x9f, 0xaf, 0xb7, 0xbb, 0xbd, 0xbe, 0xcf, 0xd7, 0xdb, 0xdd, 0xde, 0xe7, 0xeb, 0xed, 0xee, 0xf3, 0xf5, 0xf6, 0xf9, 0xfa, 0xfc, 0x11f, 0x12f, 0x137, 0x13b, 0x13d, 0x13e, 0x14f, 0x157, 0x15b, 0x15d, 0x15e, 0x167, 0x16b, 0x16d, 0x16e, 0x173, 0x175, 0x176, 0x179, 0x17a, 0x17c, 0x18f, 0x197, 0x19b, 0x19d, 0x19e, 0x1a7, 0x1ab, 0x1ad, 0x1ae, 0x1b3, 0x1b5, 0x1b6, 0x1b9, 0x1ba, 0x1bc, 0x1c7, 0x1cb, 0x1cd, 0x1ce, 0x1d3, 0x1d5, 0x1d6, 0x1d9, 0x1da, 0x1dc, 0x1e3, 0x1e5, 0x1e6, 0x1e9, 0x1ea, 0x1ec, 0x1f1, 0x1f2, 0x1f4, 0x1f8 };
const uli PRE_VALSa_7[]{ 0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe, 0x13f, 0x15f, 0x16f, 0x177, 0x17b, 0x17d, 0x17e, 0x19f, 0x1af, 0x1b7, 0x1bb, 0x1bd, 0x1be, 0x1cf, 0x1d7, 0x1db, 0x1dd, 0x1de, 0x1e7, 0x1eb, 0x1ed, 0x1ee, 0x1f3, 0x1f5, 0x1f6, 0x1f9, 0x1fa, 0x1fc };
const uli PRE_VALSa_8[]{ 0xff, 0x17f, 0x1bf, 0x1df, 0x1ef, 0x1f7, 0x1fb, 0x1fd, 0x1fe };
const uli PRE_VALSa_9[]{ 0x1ff };
const uli PRE_VALSb_2[]{ 0x3, 0x5, 0x6, 0x9, 0xa, 0xc, 0x11, 0x12, 0x14, 0x18, 0x21, 0x22, 0x24, 0x28, 0x30, 0x41, 0x42, 0x44, 0x48, 0x50, 0x60, 0x81, 0x82, 0x84, 0x88, 0x90, 0xa0, 0xc0, 0x101, 0x102, 0x104, 0x108, 0x110, 0x120, 0x140, 0x180, 0x201, 0x202, 0x204, 0x208, 0x210, 0x220, 0x240, 0x280, 0x300 };
const uli PRE_VALSb_3[]{ 0x7, 0xb, 0xd, 0xe, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c, 0x23, 0x25, 0x26, 0x29, 0x2a, 0x2c, 0x31, 0x32, 0x34, 0x38, 0x43, 0x45, 0x46, 0x49, 0x4a, 0x4c, 0x51, 0x52, 0x54, 0x58, 0x61, 0x62, 0x64, 0x68, 0x70, 0x83, 0x85, 0x86, 0x89, 0x8a, 0x8c, 0x91, 0x92, 0x94, 0x98, 0xa1, 0xa2, 0xa4, 0xa8, 0xb0, 0xc1, 0xc2, 0xc4, 0xc8, 0xd0, 0xe0, 0x103, 0x105, 0x106, 0x109, 0x10a, 0x10c, 0x111, 0x112, 0x114, 0x118, 0x121, 0x122, 0x124, 0x128, 0x130, 0x141, 0x142, 0x144, 0x148, 0x150, 0x160, 0x181, 0x182, 0x184, 0x188, 0x190, 0x1a0, 0x1c0, 0x203, 0x205, 0x206, 0x209, 0x20a, 0x20c, 0x211, 0x212, 0x214, 0x218, 0x221, 0x222, 0x224, 0x228, 0x230, 0x241, 0x242, 0x244, 0x248, 0x250, 0x260, 0x281, 0x282, 0x284, 0x288, 0x290, 0x2a0, 0x2c0, 0x301, 0x302, 0x304, 0x308, 0x310, 0x320, 0x340, 0x380 };
const uli PRE_VALSb_4[]{ 0xf, 0x17, 0x1b, 0x1d, 0x1e, 0x27, 0x2b, 0x2d, 0x2e, 0x33, 0x35, 0x36, 0x39, 0x3a, 0x3c, 0x47, 0x4b, 0x4d, 0x4e, 0x53, 0x55, 0x56, 0x59, 0x5a, 0x5c, 0x63, 0x65, 0x66, 0x69, 0x6a, 0x6c, 0x71, 0x72, 0x74, 0x78, 0x87, 0x8b, 0x8d, 0x8e, 0x93, 0x95, 0x96, 0x99, 0x9a, 0x9c, 0xa3, 0xa5, 0xa6, 0xa9, 0xaa, 0xac, 0xb1, 0xb2, 0xb4, 0xb8, 0xc3, 0xc5, 0xc6, 0xc9, 0xca, 0xcc, 0xd1, 0xd2, 0xd4, 0xd8, 0xe1, 0xe2, 0xe4, 0xe8, 0xf0, 0x107, 0x10b, 0x10d, 0x10e, 0x113, 0x115, 0x116, 0x119, 0x11a, 0x11c, 0x123, 0x125, 0x126, 0x129, 0x12a, 0x12c, 0x131, 0x132, 0x134, 0x138, 0x143, 0x145, 0x146, 0x149, 0x14a, 0x14c, 0x151, 0x152, 0x154, 0x158, 0x161, 0x162, 0x164, 0x168, 0x170, 0x183, 0x185, 0x186, 0x189, 0x18a, 0x18c, 0x191, 0x192, 0x194, 0x198, 0x1a1, 0x1a2, 0x1a4, 0x1a8, 0x1b0, 0x1c1, 0x1c2, 0x1c4, 0x1c8, 0x1d0, 0x1e0, 0x207, 0x20b, 0x20d, 0x20e, 0x213, 0x215, 0x216, 0x219, 0x21a, 0x21c, 0x223, 0x225, 0x226, 0x229, 0x22a, 0x22c, 0x231, 0x232, 0x234, 0x238, 0x243, 0x245, 0x246, 0x249, 0x24a, 0x24c, 0x251, 0x252, 0x254, 0x258, 0x261, 0x262, 0x264, 0x268, 0x270, 0x283, 0x285, 0x286, 0x289, 0x28a, 0x28c, 0x291, 0x292, 0x294, 0x298, 0x2a1, 0x2a2, 0x2a4, 0x2a8, 0x2b0, 0x2c1, 0x2c2, 0x2c4, 0x2c8, 0x2d0, 0x2e0, 0x303, 0x305, 0x306, 0x309, 0x30a, 0x30c, 0x311, 0x312, 0x314, 0x318, 0x321, 0x322, 0x324, 0x328, 0x330, 0x341, 0x342, 0x344, 0x348, 0x350, 0x360, 0x381, 0x382, 0x384, 0x388, 0x390, 0x3a0, 0x3c0 };
const uli PRE_VALSb_5[]{ 0x1f, 0x2f, 0x37, 0x3b, 0x3d, 0x3e, 0x4f, 0x57, 0x5b, 0x5d, 0x5e, 0x67, 0x6b, 0x6d, 0x6e, 0x73, 0x75, 0x76, 0x79, 0x7a, 0x7c, 0x8f, 0x97, 0x9b, 0x9d, 0x9e, 0xa7, 0xab, 0xad, 0xae, 0xb3, 0xb5, 0xb6, 0xb9, 0xba, 0xbc, 0xc7, 0xcb, 0xcd, 0xce, 0xd3, 0xd5, 0xd6, 0xd9, 0xda, 0xdc, 0xe3, 0xe5, 0xe6, 0xe9, 0xea, 0xec, 0xf1, 0xf2, 0xf4, 0xf8, 0x10f, 0x117, 0x11b, 0x11d, 0x11e, 0x127, 0x12b, 0x12d, 0x12e, 0x133, 0x135, 0x136, 0x139, 0x13a, 0x13c, 0x147, 0x14b, 0x14d, 0x14e, 0x153, 0x155, 0x156, 0x159, 0x15a, 0x15c, 0x163, 0x165, 0x166, 0x169, 0x16a, 0x16c, 0x171, 0x172, 0x174, 0x178, 0x187, 0x18b, 0x18d, 0x18e, 0x193, 0x195, 0x196, 0x199, 0x19a, 0x19c, 0x1a3, 0x1a5, 0x1a6, 0x1a9, 0x1aa, 0x1ac, 0x1b1, 0x1b2, 0x1b4, 0x1b8, 0x1c3, 0x1c5, 0x1c6, 0x1c9, 0x1ca, 0x1cc, 0x1d1, 0x1d2, 0x1d4, 0x1d8, 0x1e1, 0x1e2, 0x1e4, 0x1e8, 0x1f0, 0x20f, 0x217, 0x21b, 0x21d, 0x21e, 0x227, 0x22b, 0x22d, 0x22e, 0x233, 0x235, 0x236, 0x239, 0x23a, 0x23c, 0x247, 0x24b, 0x24d, 0x24e, 0x253, 0x255, 0x256, 0x259, 0x25a, 0x25c, 0x263, 0x265, 0x266, 0x269, 0x26a, 0x26c, 0x271, 0x272, 0x274, 0x278, 0x287, 0x28b, 0x28d, 0x28e, 0x293, 0x295, 0x296, 0x299, 0x29a, 0x29c, 0x2a3, 0x2a5, 0x2a6, 0x2a9, 0x2aa, 0x2ac, 0x2b1, 0x2b2, 0x2b4, 0x2b8, 0x2c3, 0x2c5, 0x2c6, 0x2c9, 0x2ca, 0x2cc, 0x2d1, 0x2d2, 0x2d4, 0x2d8, 0x2e1, 0x2e2, 0x2e4, 0x2e8, 0x2f0, 0x307, 0x30b, 0x30d, 0x30e, 0x313, 0x315, 0x316, 0x319, 0x31a, 0x31c, 0x323, 0x325, 0x326, 0x329, 0x32a, 0x32c, 0x331, 0x332, 0x334, 0x338, 0x343, 0x345, 0x346, 0x349, 0x34a, 0x34c, 0x351, 0x352, 0x354, 0x358, 0x361, 0x362, 0x364, 0x368, 0x370, 0x383, 0x385, 0x386, 0x389, 0x38a, 0x38c, 0x391, 0x392, 0x394, 0x398, 0x3a1, 0x3a2, 0x3a4, 0x3a8, 0x3b0, 0x3c1, 0x3c2, 0x3c4, 0x3c8, 0x3d0, 0x3e0 };
const uli PRE_VALSb_6[]{ 0x3f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7e, 0x9f, 0xaf, 0xb7, 0xbb, 0xbd, 0xbe, 0xcf, 0xd7, 0xdb, 0xdd, 0xde, 0xe7, 0xeb, 0xed, 0xee, 0xf3, 0xf5, 0xf6, 0xf9, 0xfa, 0xfc, 0x11f, 0x12f, 0x137, 0x13b, 0x13d, 0x13e, 0x14f, 0x157, 0x15b, 0x15d, 0x15e, 0x167, 0x16b, 0x16d, 0x16e, 0x173, 0x175, 0x176, 0x179, 0x17a, 0x17c, 0x18f, 0x197, 0x19b, 0x19d, 0x19e, 0x1a7, 0x1ab, 0x1ad, 0x1ae, 0x1b3, 0x1b5, 0x1b6, 0x1b9, 0x1ba, 0x1bc, 0x1c7, 0x1cb, 0x1cd, 0x1ce, 0x1d3, 0x1d5, 0x1d6, 0x1d9, 0x1da, 0x1dc, 0x1e3, 0x1e5, 0x1e6, 0x1e9, 0x1ea, 0x1ec, 0x1f1, 0x1f2, 0x1f4, 0x1f8, 0x21f, 0x22f, 0x237, 0x23b, 0x23d, 0x23e, 0x24f, 0x257, 0x25b, 0x25d, 0x25e, 0x267, 0x26b, 0x26d, 0x26e, 0x273, 0x275, 0x276, 0x279, 0x27a, 0x27c, 0x28f, 0x297, 0x29b, 0x29d, 0x29e, 0x2a7, 0x2ab, 0x2ad, 0x2ae, 0x2b3, 0x2b5, 0x2b6, 0x2b9, 0x2ba, 0x2bc, 0x2c7, 0x2cb, 0x2cd, 0x2ce, 0x2d3, 0x2d5, 0x2d6, 0x2d9, 0x2da, 0x2dc, 0x2e3, 0x2e5, 0x2e6, 0x2e9, 0x2ea, 0x2ec, 0x2f1, 0x2f2, 0x2f4, 0x2f8, 0x30f, 0x317, 0x31b, 0x31d, 0x31e, 0x327, 0x32b, 0x32d, 0x32e, 0x333, 0x335, 0x336, 0x339, 0x33a, 0x33c, 0x347, 0x34b, 0x34d, 0x34e, 0x353, 0x355, 0x356, 0x359, 0x35a, 0x35c, 0x363, 0x365, 0x366, 0x369, 0x36a, 0x36c, 0x371, 0x372, 0x374, 0x378, 0x387, 0x38b, 0x38d, 0x38e, 0x393, 0x395, 0x396, 0x399, 0x39a, 0x39c, 0x3a3, 0x3a5, 0x3a6, 0x3a9, 0x3aa, 0x3ac, 0x3b1, 0x3b2, 0x3b4, 0x3b8, 0x3c3, 0x3c5, 0x3c6, 0x3c9, 0x3ca, 0x3cc, 0x3d1, 0x3d2, 0x3d4, 0x3d8, 0x3e1, 0x3e2, 0x3e4, 0x3e8, 0x3f0 };
const uli PRE_VALSb_7[]{ 0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe, 0x13f, 0x15f, 0x16f, 0x177, 0x17b, 0x17d, 0x17e, 0x19f, 0x1af, 0x1b7, 0x1bb, 0x1bd, 0x1be, 0x1cf, 0x1d7, 0x1db, 0x1dd, 0x1de, 0x1e7, 0x1eb, 0x1ed, 0x1ee, 0x1f3, 0x1f5, 0x1f6, 0x1f9, 0x1fa, 0x1fc, 0x23f, 0x25f, 0x26f, 0x277, 0x27b, 0x27d, 0x27e, 0x29f, 0x2af, 0x2b7, 0x2bb, 0x2bd, 0x2be, 0x2cf, 0x2d7, 0x2db, 0x2dd, 0x2de, 0x2e7, 0x2eb, 0x2ed, 0x2ee, 0x2f3, 0x2f5, 0x2f6, 0x2f9, 0x2fa, 0x2fc, 0x31f, 0x32f, 0x337, 0x33b, 0x33d, 0x33e, 0x34f, 0x357, 0x35b, 0x35d, 0x35e, 0x367, 0x36b, 0x36d, 0x36e, 0x373, 0x375, 0x376, 0x379, 0x37a, 0x37c, 0x38f, 0x397, 0x39b, 0x39d, 0x39e, 0x3a7, 0x3ab, 0x3ad, 0x3ae, 0x3b3, 0x3b5, 0x3b6, 0x3b9, 0x3ba, 0x3bc, 0x3c7, 0x3cb, 0x3cd, 0x3ce, 0x3d3, 0x3d5, 0x3d6, 0x3d9, 0x3da, 0x3dc, 0x3e3, 0x3e5, 0x3e6, 0x3e9, 0x3ea, 0x3ec, 0x3f1, 0x3f2, 0x3f4, 0x3f8 };
const uli PRE_VALSb_8[]{ 0xff, 0x17f, 0x1bf, 0x1df, 0x1ef, 0x1f7, 0x1fb, 0x1fd, 0x1fe, 0x27f, 0x2bf, 0x2df, 0x2ef, 0x2f7, 0x2fb, 0x2fd, 0x2fe, 0x33f, 0x35f, 0x36f, 0x377, 0x37b, 0x37d, 0x37e, 0x39f, 0x3af, 0x3b7, 0x3bb, 0x3bd, 0x3be, 0x3cf, 0x3d7, 0x3db, 0x3dd, 0x3de, 0x3e7, 0x3eb, 0x3ed, 0x3ee, 0x3f3, 0x3f5, 0x3f6, 0x3f9, 0x3fa, 0x3fc };
const uli PRE_VALSb_9[]{ 0x1ff, 0x2ff, 0x37f, 0x3bf, 0x3df, 0x3ef, 0x3f7, 0x3fb, 0x3fd, 0x3fe };
const uli PRE_VALSb_a[]{ 0x3ff };

const uli* const PRE_VALS3[]{ PRE_VALS3_2 };
const uli* const PRE_VALS4[]{ PRE_VALS4_2, PRE_VALS4_3 };
const uli* const PRE_VALS5[]{ PRE_VALS5_2, PRE_VALS5_3, PRE_VALS5_4 };
const uli* const PRE_VALS6[]{ PRE_VALS6_2, PRE_VALS6_3, PRE_VALS6_4, PRE_VALS6_5 };
const uli* const PRE_VALS7[]{ PRE_VALS7_2, PRE_VALS7_3, PRE_VALS7_4, PRE_VALS7_5, PRE_VALS7_6 };
const uli* const PRE_VALS8[]{ PRE_VALS8_2, PRE_VALS8_3, PRE_VALS8_4, PRE_VALS8_5, PRE_VALS8_6, PRE_VALS8_7 };
const uli* const PRE_VALS9[]{ PRE_VALS9_2, PRE_VALS9_3, PRE_VALS9_4, PRE_VALS9_5, PRE_VALS9_6, PRE_VALS9_7, PRE_VALS9_8 };
const uli* const PRE_VALSa[]{ PRE_VALSa_2, PRE_VALSa_3, PRE_VALSa_4, PRE_VALSa_5, PRE_VALSa_6, PRE_VALSa_7, PRE_VALSa_8, PRE_VALSa_9 };
const uli* const PRE_VALSb[]{ PRE_VALSb_2, PRE_VALSb_3, PRE_VALSb_4, PRE_VALSb_5, PRE_VALSb_6, PRE_VALSb_7, PRE_VALSb_8, PRE_VALSb_9, PRE_VALSb_a };

const uli PRE_LENS3[]{ 0x1 };
const uli PRE_LENS4[]{ 0x3, 0x1 };
const uli PRE_LENS5[]{ 0x6, 0x4, 0x1 };
const uli PRE_LENS6[]{ 0xa, 0xa, 0x5, 0x1 };
const uli PRE_LENS7[]{ 0xf, 0x14, 0xf, 0x6, 0x1 };
const uli PRE_LENS8[]{ 0x15, 0x23, 0x23, 0x15, 0x7, 0x1 };
const uli PRE_LENS9[]{ 0x1c, 0x38, 0x46, 0x38, 0x1c, 0x8, 0x1 };
const uli PRE_LENSa[]{ 0x24, 0x54, 0x7e, 0x7e, 0x54, 0x24, 0x9, 0x1 };
const uli PRE_LENSb[]{ 0x2d, 0x78, 0xd2, 0xfc, 0xd2, 0x78, 0x2d, 0xa, 0x1 };

const uli* const* const PRE_VALS[]{ PRE_VALS3, PRE_VALS4, PRE_VALS5, PRE_VALS6, PRE_VALS7, PRE_VALS8, PRE_VALS9, PRE_VALSa, PRE_VALSb };

const uli* const PRE_LENS[]{ PRE_LENS3, PRE_LENS4, PRE_LENS5, PRE_LENS6, PRE_LENS7, PRE_LENS8, PRE_LENS9, PRE_LENSa, PRE_LENSb };

uli go(const vuli& X, const vuli& Y)
{
	uli n = X.size();
	if (n <= 1)
	{
		return 0;
	}
	vuli C(n << n);
	loop(1, n, i)
	{
		C[i << n | 1 << i] = dist(X, Y, 0, i);
	}

	if (n > 2)
	{
		const uli* const* valss = PRE_VALS[n - 3];
		const uli* lens = PRE_LENS[n - 3];
		loop(2, n, s)
		{
			const uli* vals = valss[s - 2];
			uli len = lens[s - 2];
			loop(0, len, i)
			{
				uli S = vals[i] << 1;
				loop(1, n, k)
				{
					if (S & (1 << k))
					{
						uli& minVal = C[k << n | S];
						minVal = MAX(uli);
						loop(1, n, m)
						{
							if (m != k && (S & (1 << m)))
							{
								uli val = C[m << n | (S & ~(1 << k))] + dist(X, Y, m, k);
								if (val < minVal)
									minVal = val;
							}
						}
					}
				}
			}
		}
	}

	uli ret = MAX(uli);
	loop(1, n, k)
	{
		uli val = C[k << n | (1 << n) - 2] + dist(X, Y, k, 0);
		if (val < ret)
			ret = val;
	}

	return ret;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	uli T;
	cin >> T;
	loop(0, T, t)
	{
		uli W, H;
		cin >> W >> H;
		vuli X, Y;
		X.reserve(11);
		Y.reserve(11);
		uli sx, sy;
		cin >> sx >> sy;
		X.push_back(sx - 1);
		Y.push_back(sy - 1);
		uli B;
		cin >> B;
		loop(0, B, i)
		{
			uli x, y;
			cin >> x >> y;
			X.push_back(x - 1);
			Y.push_back(y - 1);
		}
		cout << go(X, Y) << endl;
	}

	return 0;
}
