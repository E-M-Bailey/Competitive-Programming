#include <cstring>
#include <algorithm>
#include <array>
#include <deque>
#include <forward_list>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <math.h>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#define loop(n, i) for (ui i = 0; i < (n); i++)

using namespace std;

typedef long long          ll;
typedef unsigned long long ull;
typedef unsigned           ui;
typedef pair<int, int>     pi;
typedef pair<ui, ui>       pui;
typedef vector<int>        vi;
typedef vector<ui>         vui;
typedef vector<pi>         vpi;
typedef vector<pui>        vpui;
typedef vector<bool>       vb;

typedef array<array<ui, 3>, 3> bs;

inline constexpr ui toNum(const bs& b)
{
	return
		b[0][0] * 6561 +
		b[0][1] * 2187 +
		b[0][2] * 729 +
		b[1][0] * 243 +
		b[1][1] * 81 +
		b[1][2] * 27 +
		b[2][0] * 9 +
		b[2][1] * 3 +
		b[2][2] * 1;
}

constexpr const array<ui, 19683 / 32 + 1> all { 0x2869caab, 0x86957447, 0x11ca1055, 0x6014455d, 0x34e555b9, 0x61055868, 0x100d3955, 0x47280034, 0x80511574, 0xd39556e5, 0x39601440, 0x94880080, 0x556aba23, 0x88e50d39, 0xab0d2ae, 0x10558682, 0xd39556, 0x55800341, 0x239434e5, 0x2ac34aba, 0x341008, 0x20ab0d0, 0xca000000, 0x14455d11, 0xe555b960, 0x58051034, 0xa200200e, 0x5aac88e5, 0x39434e55, 0xac342ba2, 0x60144082, 0x88008039, 0xaba2396, 0xa20020, 0xa200000, 0xa2395cb0, 0x2c0288ab, 0x869caab7, 0x9434e555, 0xc342ba23, 0x88e5082a, 0xb00a22ac, 0x1a50aadc, 0xb082ac34, 0x8061ca2, 0x5868000a, 0x39556105, 0x34100d, 0x434e5558, 0x34aba239, 0x410082ac, 0xab0d0003, 0x20, 0xd395560, 0xd2ae88e5, 0x39420ab0, 0x88aba2, 0x98aab50c, 0x20ab0d06, 0xa72aac, 0x10000682, 0xb0d00034, 0x20a, 0x82ac3400, 0x69caab0, 0x1a08, 0x82000000, 0x6, 0x74472800, 0xe5805115, 0x40d39556, 0x80396014, 0x23968800, 0x395568ba, 0xae88e50d, 0x20ab0d2, 0xe58051, 0x8e5a2002, 0x802ae8, 0x288, 0x72c02880, 0x22ae88e5, 0xaadcb00a, 0x95561a72, 0xe88e50d3, 0x20ab0d2a, 0x88ba2394, 0x8b72c028, 0xb0d049ca, 0x72aac20a, 0x28201a, 0x39601440, 0x96880080, 0x200aba23, 0xa200, 0xb00a2000, 0xaba2395c, 0xb72c0288, 0x80069caa, 0x28800, 0xc0288000, 0x72, 0x0, 0x89440040, 0x10072c02, 0x4472d100, 0xba239557, 0x72c0288a, 0x2069caab, 0x401cb00a, 0x11cb4400, 0x9caab459, 0x57447286, 0x61050828, 0xe50d3955, 0xb0d2ae88, 0xa239420a, 0x2c02888b, 0x498a8b7, 0xac20ab0d, 0x8200a72a, 0x88e50006, 0xb00a22ae, 0x1a62aadc, 0x72c0288, 0x62910010, 0x2aad1740, 0xd11ca0a7, 0x41561a50, 0xc20ab0d0, 0x201a72aa, 0xa8b00068, 0x4472849c, 0x4584917, 0x68200, 0x41561a, 0x86800000, 0x95561055, 0x34100d3, 0x34e55580, 0x4aba2394, 0x10082ac3, 0xb0d00034, 0x20a, 0xd3955600, 0x2ae88e50, 0x9420ab0d, 0x88aba23, 0xcaab50c0, 0xab0d069, 0x1a32aac2, 0x6820, 0xd000341, 0x20ab, 0x2ac34000, 0x69caab08, 0x1a080, 0x20000000, 0x68, 0xe5558000, 0xba239434, 0x82ac342, 0x22ac88e5, 0xaadcb00a, 0xac341a50, 0xca2b082, 0x1a0806, 0x8aba2394, 0xab72c028, 0xa2069ca, 0x401cb0, 0x5911ca44, 0x868caab5, 0x68570432, 0xc3410558, 0xca2b082a, 0x1a08061, 0x1a50aac0, 0xa15911ca, 0x8040141, 0x5860001a, 0x1, 0x341000, 0x20ab0d0, 0x34000000, 0xaab082ac, 0x1a08069c, 0x0, 0x68200, 0xd0000000, 0xaac20ab0, 0x68201a72, 0x9caab000, 0x14445086, 0x1055868, 0x1a000682, 0x4156, 0x0, 0x682000, 0x0, 0x68001a08, 0x10558, 0x0, 0x0, 0x0, 0x455d11ca, 0x55b96014, 0x51034e5, 0x200e58, 0xae88e5a2, 0x434e5558, 0x34aba239, 0x144082ac, 0x803960, 0xb2239688, 0xa200200a, 0x20000000, 0x395cb00a, 0x288ab22, 0x942ab72c, 0x34e55586, 0x4aba2394, 0xe5082ac3, 0xa20ae88, 0x728adcb0, 0x82ac3418, 0x69caab0, 0x10000a08, 0x200e5805, 0x88e5a200, 0x800802ae, 0x28, 0x572c0288, 0xa22ae88e, 0x2aadcb00, 0x2001a7, 0xa2, 0x1cb00a20, 0x0, 0x10000000, 0xa25100, 0x400401cb, 0x55911cb4, 0x22ae88e5, 0xaadcb00a, 0x2881a72, 0x10072c, 0x564472d1, 0xa1a72aac, 0xa15d11c, 0x55584142, 0xa239434e, 0x82ac34ab, 0xae88e50, 0xadcb00a2, 0xc3418628, 0xcaab082a, 0x1a08029, 0xab223940, 0xb72c0288, 0xa206902a, 0x401cb00, 0x9018a440, 0x2942ab15, 0x94244728, 0x34100506, 0xaab082ac, 0x1a08069c, 0x8728ac00, 0x15d11ca1, 0x80005618, 0x868001a0, 0x1055, 0x60144000, 0x88008039, 0xaba2396, 0xa20020, 0xa200000, 0xa2395cb0, 0x2c0288ab, 0x69caab7, 0x2880080, 0x28800000, 0x72c0, 0x0, 0x44004000, 0x72c0289, 0x72d10010, 0x23955644, 0xc0288aba, 0x69caab72, 0x1cb00a20, 0xcb440040, 0xaab05d11, 0x4472869c, 0x5082957, 0x22002001, 0x20000000, 0x143002, 0x0, 0x100000, 0x43002211, 0x24400401, 0x51114, 0x0, 0x400000, 0x44, 0x0, 0x0, 0x44004, 0x440000, 0x30022286, 0x44004014, 0x511142, 0x110010, 0x1100000, 0x11142a18, 0x86004405, 0x40000002, 0x88aba239, 0xaab72c02, 0xa20698, 0x400401cb, 0x5d018b4, 0x2829caab, 0x86943447, 0x2881055, 0x10072c, 0x564062d1, 0x14400401, 0x40000000, 0x472b1401, 0x80511424, 0x52055644, 0x869caab0, 0x69574472, 0x1ca10558, 0x14405d1, 0xc505b96, 0x10558682, 0x539556, 0x55800141, 0x239434e5, 0x2ac34aba, 0xae88e508, 0xdcb00a20, 0x3418728a, 0xaab082ac, 0x1a08068c, 0xb2239400, 0x72c0288a, 0x206942ab, 0x401cb00a, 0x11ca4400, 0x842ab159, 0x56043286, 0x41005069, 0xab082ac3, 0xa08069ca, 0x728ac001, 0x5d11ca18, 0x56181, 0x68001a08, 0x10558, 0x88e50000, 0xb00a22ae, 0x1a72aadc, 0x72c0288, 0x72d10010, 0x2aac5644, 0xc10ca1a3, 0x41561a15, 0x1cb00a20, 0xcb440040, 0x10055911, 0x5100, 0x58051000, 0x55810cae, 0x59940104, 0xaac34215, 0x11ca1a72, 0x1561a15d, 0x56447284, 0x6e580510, 0x1a0c2845, 0x51584156, 0x5040306, 0x82ac3400, 0x69caab0, 0xac001a08, 0x1ca18728, 0x561815d1, 0x1a08000, 0x10558680, 0xb0000000, 0x7286942a, 0x50695644, 0x911ca100, 0x86004415, 0x8308115a, 0x56100506, 0x1005085, 0x1a080002, 0x5586800, 0x1, 0x58005618, 0x30e51, 0xc, 0x3410000, 0x0, 0x61055868, 0x100d3955, 0x55580034, 0xa239434e, 0x82ac34ab, 0x34100, 0x20ab0d, 0x55600000, 0x88e50d39, 0xab0d2ae, 0xaba23942, 0xb50c0088, 0xd069caa, 0x2aac20ab, 0x68201a6, 0x341000, 0x20ab0d0, 0x34000000, 0xaab082ac, 0x1a08029c, 0x0, 0x68200, 0x58000000, 0x39434e55, 0xac342ba2, 0xc88e5082, 0xcb00a22a, 0x41a50aad, 0x2b082ac3, 0xa080618a, 0xa2394001, 0x2c0288ab, 0x69caab7, 0x1cb00a2, 0x1ca44004, 0x8aab5591, 0x74062869, 0x10558685, 0xb082ac34, 0x8021ca2, 0xaac001a, 0x911ca0a5, 0x40141a10, 0x1a080, 0x1586, 0x41000000, 0xab0d0003, 0x20, 0x82ac340, 0x8069caab, 0x1a0, 0x68200000, 0x0, 0x20ab0d00, 0x1a72aac, 0xab000682, 0x450869ca, 0x55868144, 0x682010, 0x41561a0, 0x0, 0x82000000, 0x6, 0x1a08000, 0x10558680, 0x0, 0x0, 0x0, 0x39556000, 0xae88e50d, 0x420ab0d2, 0x888ba239, 0xa8b72c02, 0xab0d049c, 0xa62aac20, 0x68201, 0x22ae88e5, 0xaadcb00a, 0x2881a72, 0x10072c, 0x17447291, 0xa1a62aad, 0x1a55d018, 0xb0d04156, 0x72aac20a, 0x68200a, 0x809ca8b0, 0x49034472, 0x82000458, 0x561a0006, 0x41, 0xaba23940, 0xb72c0288, 0xa2069caa, 0x401cb00, 0x911cb440, 0x698aab45, 0x85740628, 0x88105586, 0x10072c02, 0x4472d100, 0x40040157, 0x14, 0x2b960144, 0x50157406, 0x1556c500, 0x9caab0d3, 0x43447282, 0xa1055868, 0x4440911c, 0x14591201, 0x5586804a, 0x43145610, 0x14100, 0xac20ab0d, 0x8201a72a, 0xca8b0006, 0x74472849, 0x458491, 0xa0006820, 0x41561, 0x2aac0000, 0xd11ca1a7, 0x41561a55, 0x11744728, 0x16a18011, 0x61a09315, 0xc5558415, 0xd04014, 0x68200, 0x41561a, 0x84800000, 0x95160045, 0x2400013, 0x0, 0xd040, 0x10000000, 0xb0d00034, 0x20a, 0x82ac3400, 0x69caab0, 0x1a08, 0x82000000, 0x6, 0xab0d000, 0x1a72aac2, 0xb0006820, 0x50869caa, 0x58681444, 0x6820105, 0x41561a00, 0x0, 0x20000000, 0x68, 0x1a080000, 0x5586800, 0x1, 0x0, 0x0, 0xac340000, 0x1ca2b082, 0x1a0806, 0xa1a50aac, 0x1a15911c, 0xa0804014, 0x15860001, 0x0, 0x869caab0, 0x68574472, 0x1ca10558, 0x445591, 0x4a155a86, 0x10558683, 0xc11456, 0x8000341, 0x5860001a, 0x1, 0x40141a00, 0x10a1158, 0x804, 0x0, 0x3, 0x0, 0x28200, 0x80000000, 0x828000a0, 0x1050, 0x0, 0x0, 0x0, 0xa000282, 0x4142, 0x50828000, 0x10, 0x14100, 0x40000000, 0x50, 0x0, 0x0, 0x0, 0x0, 0x141, 0x0, 0x0, 0x0, 0x0, };

int main()
{
	ui N;
	cin >> N;
	loop(N, tCase)
	{
		string line;
		char c;
		bs board;
		loop(3, i) loop(3, j)
		{
			cin >> c;
			board[i][j] = c == '.' ? 0u : c == 'X' ? 1u : 2u;
		}
		ui num = toNum(board);
		cout << (all[num / 32] & (1u << num % 32) ? "yes" : "no") << endl;
	}
	return 0;
}